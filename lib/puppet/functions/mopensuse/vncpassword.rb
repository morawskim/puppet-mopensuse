# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'mopensuse::vncpassword') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
        require_relative '../../../ruby-vnc/des.rb'
        
        if args.size < 1 then
            raise(Puppet::ParseError, "vncpassword(): No arguments given")
        end
        if args.size > 1 then
            raise(Puppet::ParseError, "vncpassword(): Too many arguments given (#{args.size})")
        end
        
        unless args[0].is_a?(String)
            raise(Puppet::ParseError, 'vncpassword(): Requires string as argument')
        end
        
        password = args[0].slice(0,8)
        encrypt_password = Cipher::DES.encrypt [23,82,107,6,35,78,88,7].pack("C8"), password 
        return encrypt_password
    
  end
end
